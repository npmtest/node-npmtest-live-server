{"/home/travis/build/npmtest/node-npmtest-live-server/test.js":"/* istanbul instrument in package npmtest_live_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-live-server/lib.npmtest_live_server.js":"/* istanbul instrument in package npmtest_live_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_live_server = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_live_server = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-live-server/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-live-server && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_live_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_live_server\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_live_server.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_live_server.rollup.js'] =\n            local.assetsDict['/assets.npmtest_live_server.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_live_server.__dirname +\n                    '/lib.npmtest_live_server.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-live-server/live-server/index.js":"#!/usr/bin/env node\nvar fs = require('fs'),\n\tconnect = require('connect'),\n\tserveIndex = require('serve-index'),\n\tlogger = require('morgan'),\n\tWebSocket = require('faye-websocket'),\n\tpath = require('path'),\n\turl = require('url'),\n\thttp = require('http'),\n\tsend = require('send'),\n\topen = require('opn'),\n\tes = require(\"event-stream\"),\n\tos = require('os'),\n\tchokidar = require('chokidar');\nrequire('colors');\n\nvar INJECTED_CODE = fs.readFileSync(path.join(__dirname, \"injected.html\"), \"utf8\");\n\nvar LiveServer = {\n\tserver: null,\n\twatcher: null,\n\tlogLevel: 2\n};\n\nfunction escape(html){\n\treturn String(html)\n\t\t.replace(/&(?!\\w+;)/g, '&amp;')\n\t\t.replace(/</g, '&lt;')\n\t\t.replace(/>/g, '&gt;')\n\t\t.replace(/\"/g, '&quot;');\n}\n\n// Based on connect.static(), but streamlined and with added code injecter\nfunction staticServer(root) {\n\tvar isFile = false;\n\ttry { // For supporting mounting files instead of just directories\n\t\tisFile = fs.statSync(root).isFile();\n\t} catch (e) {\n\t\tif (e.code !== \"ENOENT\") throw e;\n\t}\n\treturn function(req, res, next) {\n\t\tif (req.method !== \"GET\" && req.method !== \"HEAD\") return next();\n\t\tvar reqpath = isFile ? \"\" : url.parse(req.url).pathname;\n\t\tvar hasNoOrigin = !req.headers.origin;\n\t\tvar injectCandidates = [ new RegExp(\"</body>\", \"i\"), new RegExp(\"</svg>\"), new RegExp(\"</head>\", \"i\")];\n\t\tvar injectTag = null;\n\n\t\tfunction directory() {\n\t\t\tvar pathname = url.parse(req.originalUrl).pathname;\n\t\t\tres.statusCode = 301;\n\t\t\tres.setHeader('Location', pathname + '/');\n\t\t\tres.end('Redirecting to ' + escape(pathname) + '/');\n\t\t}\n\n\t\tfunction file(filepath /*, stat*/) {\n\t\t\tvar x = path.extname(filepath).toLocaleLowerCase(), match,\n\t\t\t\t\tpossibleExtensions = [ \"\", \".html\", \".htm\", \".xhtml\", \".php\", \".svg\" ];\n\t\t\tif (hasNoOrigin && (possibleExtensions.indexOf(x) > -1)) {\n\t\t\t\t// TODO: Sync file read here is not nice, but we need to determine if the html should be injected or not\n\t\t\t\tvar contents = fs.readFileSync(filepath, \"utf8\");\n\t\t\t\tfor (var i = 0; i < injectCandidates.length; ++i) {\n\t\t\t\t\tmatch = injectCandidates[i].exec(contents);\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\tinjectTag = match[0];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (injectTag === null && LiveServer.logLevel >= 3) {\n\t\t\t\t\tconsole.warn(\"Failed to inject refresh script!\".yellow,\n\t\t\t\t\t\t\"Couldn't find any of the tags \", injectCandidates, \"from\", filepath);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction error(err) {\n\t\t\tif (err.status === 404) return next();\n\t\t\tnext(err);\n\t\t}\n\n\t\tfunction inject(stream) {\n\t\t\tif (injectTag) {\n\t\t\t\t// We need to modify the length given to browser\n\t\t\t\tvar len = INJECTED_CODE.length + res.getHeader('Content-Length');\n\t\t\t\tres.setHeader('Content-Length', len);\n\t\t\t\tvar originalPipe = stream.pipe;\n\t\t\t\tstream.pipe = function(resp) {\n\t\t\t\t\toriginalPipe.call(stream, es.replace(new RegExp(injectTag, \"i\"), INJECTED_CODE + injectTag)).pipe(resp);\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tsend(req, reqpath, { root: root })\n\t\t\t.on('error', error)\n\t\t\t.on('directory', directory)\n\t\t\t.on('file', file)\n\t\t\t.on('stream', inject)\n\t\t\t.pipe(res);\n\t};\n}\n\n/**\n * Rewrite request URL and pass it back to the static handler.\n * @param staticHandler {function} Next handler\n * @param file {string} Path to the entry point file\n */\nfunction entryPoint(staticHandler, file) {\n\tif (!file) return function(req, res, next) { next(); };\n\n\treturn function(req, res, next) {\n\t\treq.url = \"/\" + file;\n\t\tstaticHandler(req, res, next);\n\t};\n}\n\n/**\n * Start a live server with parameters given as an object\n * @param host {string} Address to bind to (default: 0.0.0.0)\n * @param port {number} Port number (default: 8080)\n * @param root {string} Path to root directory (default: cwd)\n * @param watch {array} Paths to exclusively watch for changes\n * @param ignore {array} Paths to ignore when watching files for changes\n * @param ignorePattern {regexp} Ignore files by RegExp\n * @param open {(string|string[])} Subpath(s) to open in browser, use false to suppress launch (default: server root)\n * @param mount {array} Mount directories onto a route, e.g. [['/components', './node_modules']].\n * @param logLevel {number} 0 = errors only, 1 = some, 2 = lots\n * @param file {string} Path to the entry point file\n * @param wait {number} Server will wait for all changes, before reloading\n * @param htpasswd {string} Path to htpasswd file to enable HTTP Basic authentication\n * @param middleware {array} Append middleware to stack, e.g. [function(req, res, next) { next(); }].\n */\nLiveServer.start = function(options) {\n\toptions = options || {};\n\tvar host = options.host || '0.0.0.0';\n\tvar port = options.port !== undefined ? options.port : 8080; // 0 means random\n\tvar root = options.root || process.cwd();\n\tvar mount = options.mount || [];\n\tvar watchPaths = options.watch || [root];\n\tLiveServer.logLevel = options.logLevel === undefined ? 2 : options.logLevel;\n\tvar openPath = (options.open === undefined || options.open === true) ?\n\t\t\"\" : ((options.open === null || options.open === false) ? null : options.open);\n\tif (options.noBrowser) openPath = null; // Backwards compatibility with 0.7.0\n\tvar file = options.file;\n\tvar staticServerHandler = staticServer(root);\n\tvar wait = options.wait === undefined ? 100 : options.wait;\n\tvar browser = options.browser || null;\n\tvar htpasswd = options.htpasswd || null;\n\tvar cors = options.cors || false;\n\tvar https = options.https || null;\n\tvar proxy = options.proxy || [];\n\tvar middleware = options.middleware || [];\n\n\t// Setup a web server\n\tvar app = connect();\n\n\t// Add logger. Level 2 logs only errors\n\tif (LiveServer.logLevel === 2) {\n\t\tapp.use(logger('dev', {\n\t\t\tskip: function (req, res) { return res.statusCode < 400; }\n\t\t}));\n\t// Level 2 or above logs all requests\n\t} else if (LiveServer.logLevel > 2) {\n\t\tapp.use(logger('dev'));\n\t}\n\tif (options.spa) {\n\t\tmiddleware.push(\"spa\");\n\t}\n\t// Add middleware\n\tmiddleware.map(function(mw) {\n\t\tif (typeof mw === \"string\") {\n\t\t\tvar ext = path.extname(mw).toLocaleLowerCase();\n\t\t\tif (ext !== \".js\") {\n\t\t\t\tmw = require(path.join(__dirname, \"middleware\", mw + \".js\"));\n\t\t\t} else {\n\t\t\t\tmw = require(mw);\n\t\t\t}\n\t\t}\n\t\tapp.use(mw);\n\t});\n\n\t// Use http-auth if configured\n\tif (htpasswd !== null) {\n\t\tvar auth = require('http-auth');\n\t\tvar basic = auth.basic({\n\t\t\trealm: \"Please authorize\",\n\t\t\tfile: htpasswd\n\t\t});\n\t\tapp.use(auth.connect(basic));\n\t}\n\tif (cors) {\n\t\tapp.use(require(\"cors\")({\n\t\t\torigin: true, // reflecting request origin\n\t\t\tcredentials: true // allowing requests with credentials\n\t\t}));\n\t}\n\tmount.forEach(function(mountRule) {\n\t\tvar mountPath = path.resolve(process.cwd(), mountRule[1]);\n\t\tif (!options.watch) // Auto add mount paths to wathing but only if exclusive path option is not given\n\t\t\twatchPaths.push(mountPath);\n\t\tapp.use(mountRule[0], staticServer(mountPath));\n\t\tif (LiveServer.logLevel >= 1)\n\t\t\tconsole.log('Mapping %s to \"%s\"', mountRule[0], mountPath);\n\t});\n\tproxy.forEach(function(proxyRule) {\n\t\tvar proxyOpts = url.parse(proxyRule[1]);\n\t\tproxyOpts.via = true;\n\t\tproxyOpts.preserveHost = true;\n\t\tapp.use(proxyRule[0], require('proxy-middleware')(proxyOpts));\n\t\tif (LiveServer.logLevel >= 1)\n\t\t\tconsole.log('Mapping %s to \"%s\"', proxyRule[0], proxyRule[1]);\n\t});\n\tapp.use(staticServerHandler) // Custom static server\n\t\t.use(entryPoint(staticServerHandler, file))\n\t\t.use(serveIndex(root, { icons: true }));\n\n\tvar server, protocol;\n\tif (https !== null) {\n\t\tvar httpsConfig = https;\n\t\tif (typeof https === \"string\") {\n\t\t\thttpsConfig = require(path.resolve(process.cwd(), https));\n\t\t}\n\t\tserver = require(\"https\").createServer(httpsConfig, app);\n\t\tprotocol = \"https\";\n\t} else {\n\t\tserver = http.createServer(app);\n\t\tprotocol = \"http\";\n\t}\n\n\t// Handle server startup errors\n\tserver.addListener('error', function(e) {\n\t\tif (e.code === 'EADDRINUSE') {\n\t\t\tvar serveURL = protocol + '://' + host + ':' + port;\n\t\t\tconsole.log('%s is already in use. Trying another port.'.yellow, serveURL);\n\t\t\tsetTimeout(function() {\n\t\t\t\tserver.listen(0, host);\n\t\t\t}, 1000);\n\t\t} else {\n\t\t\tconsole.error(e.toString().red);\n\t\t\tLiveServer.shutdown();\n\t\t}\n\t});\n\n\t// Handle successful server\n\tserver.addListener('listening', function(/*e*/) {\n\t\tLiveServer.server = server;\n\n\t\tvar address = server.address();\n\t\tvar serveHost = address.address === \"0.0.0.0\" ? \"127.0.0.1\" : address.address;\n\t\tvar openHost = host === \"0.0.0.0\" ? \"127.0.0.1\" : host;\n\n\t\tvar serveURL = protocol + '://' + serveHost + ':' + address.port;\n\t\tvar openURL = protocol + '://' + openHost + ':' + address.port;\n\n\t\tvar serveURLs = [ serveURL ];\n\t\tif (LiveServer.logLevel > 2 && address.address === \"0.0.0.0\") {\n\t\t\tvar ifaces = os.networkInterfaces();\n\t\t\tserveURLs = Object.keys(ifaces)\n\t\t\t\t.map(function(iface) {\n\t\t\t\t\treturn ifaces[iface];\n\t\t\t\t})\n\t\t\t\t// flatten address data, use only IPv4\n\t\t\t\t.reduce(function(data, addresses) {\n\t\t\t\t\taddresses.filter(function(addr) {\n\t\t\t\t\t\treturn addr.family === \"IPv4\";\n\t\t\t\t\t}).forEach(function(addr) {\n\t\t\t\t\t\tdata.push(addr);\n\t\t\t\t\t});\n\t\t\t\t\treturn data;\n\t\t\t\t}, [])\n\t\t\t\t.map(function(addr) {\n\t\t\t\t\treturn protocol + \"://\" + addr.address + \":\" + address.port;\n\t\t\t\t});\n\t\t}\n\n\t\t// Output\n\t\tif (LiveServer.logLevel >= 1) {\n\t\t\tif (serveURL === openURL)\n\t\t\t\tif (serveURLs.length === 1) {\n\t\t\t\t\tconsole.log((\"Serving \\\"%s\\\" at %s\").green, root, serveURLs[0]);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log((\"Serving \\\"%s\\\" at\\n\\t%s\").green, root, serveURLs.join(\"\\n\\t\"));\n\t\t\t\t}\n\t\t\telse\n\t\t\t\tconsole.log((\"Serving \\\"%s\\\" at %s (%s)\").green, root, openURL, serveURL);\n\t\t}\n\n\t\t// Launch browser\n\t\tif (openPath !== null)\n\t\t\tif (typeof openPath === \"object\") {\n\t\t\t\topenPath.forEach(function(p) {\n\t\t\t\t\topen(openURL + p, {app: browser});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\topen(openURL + openPath, {app: browser});\n\t\t\t}\n\t});\n\n\t// Setup server to listen at port\n\tserver.listen(port, host);\n\n\t// WebSocket\n\tvar clients = [];\n\tserver.addListener('upgrade', function(request, socket, head) {\n\t\tvar ws = new WebSocket(request, socket, head);\n\t\tws.onopen = function() { ws.send('connected'); };\n\n\t\tif (wait > 0) {\n\t\t\t(function() {\n\t\t\t\tvar wssend = ws.send;\n\t\t\t\tvar waitTimeout;\n\t\t\t\tws.send = function() {\n\t\t\t\t\tvar args = arguments;\n\t\t\t\t\tif (waitTimeout) clearTimeout(waitTimeout);\n\t\t\t\t\twaitTimeout = setTimeout(function(){\n\t\t\t\t\t\twssend.apply(ws, args);\n\t\t\t\t\t}, wait);\n\t\t\t\t};\n\t\t\t})();\n\t\t}\n\n\t\tws.onclose = function() {\n\t\t\tclients = clients.filter(function (x) {\n\t\t\t\treturn x !== ws;\n\t\t\t});\n\t\t};\n\n\t\tclients.push(ws);\n\t});\n\n\tvar ignored = [\n\t\tfunction(testPath) { // Always ignore dotfiles (important e.g. because editor hidden temp files)\n\t\t\treturn testPath !== \".\" && /(^[.#]|(?:__|~)$)/.test(path.basename(testPath));\n\t\t}\n\t];\n\tif (options.ignore) {\n\t\tignored = ignored.concat(options.ignore);\n\t}\n\tif (options.ignorePattern) {\n\t\tignored.push(options.ignorePattern);\n\t}\n\t// Setup file watcher\n\tLiveServer.watcher = chokidar.watch(watchPaths, {\n\t\tignored: ignored,\n\t\tignoreInitial: true\n\t});\n\tfunction handleChange(changePath) {\n\t\tvar cssChange = path.extname(changePath) === \".css\";\n\t\tif (LiveServer.logLevel >= 1) {\n\t\t\tif (cssChange)\n\t\t\t\tconsole.log(\"CSS change detected\".magenta, changePath);\n\t\t\telse console.log(\"Change detected\".cyan, changePath);\n\t\t}\n\t\tclients.forEach(function(ws) {\n\t\t\tif (ws)\n\t\t\t\tws.send(cssChange ? 'refreshcss' : 'reload');\n\t\t});\n\t}\n\tLiveServer.watcher\n\t\t.on(\"change\", handleChange)\n\t\t.on(\"add\", handleChange)\n\t\t.on(\"unlink\", handleChange)\n\t\t.on(\"addDir\", handleChange)\n\t\t.on(\"unlinkDir\", handleChange)\n\t\t.on(\"ready\", function () {\n\t\t\tif (LiveServer.logLevel >= 1)\n\t\t\t\tconsole.log(\"Ready for changes\".cyan);\n\t\t})\n\t\t.on(\"error\", function (err) {\n\t\t\tconsole.log(\"ERROR:\".red, err);\n\t\t});\n\n\treturn server;\n};\n\nLiveServer.shutdown = function() {\n\tvar watcher = LiveServer.watcher;\n\tif (watcher) {\n\t\twatcher.close();\n\t}\n\tvar server = LiveServer.server;\n\tif (server)\n\t\tserver.close();\n};\n\nmodule.exports = LiveServer;\n"}